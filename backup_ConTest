package homework2.contactlist;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 * Прошу не судить строго, программа написана по большей части в процедурном стиле
 * с небольшим использованием ооп. Зто имеет полностью рабочий и протестированный
 * функционал в соовествии с ТЗ. Писалась для практики и набития руки.
 * В результате были сделаны интересные открытия и понимание плюсов ООП по сравнению с
 * процедурной парадигмой, а так же ряд других инетерсных особенностей синтаксиса java
 */

import static homework2.contactlist.Contact.*;


import java.util.*;

/**
 * Руководство пользователя програмой:
 * Список контактов представляет из себя массив контактов.
 * Список контактов можно выводить на экран, добавлять в него новый контакт,
 * находить контакт по номеру или имени, выводить киевстар или мтс контакты,
 * выводить первые и последние 5 контактов, удалять последний контакт,
 * удалять контакт по заданым критериям: имя или номер телефона
 */
public class ConTest {
    public static void main(String[] args) {
        Contact contact0 = new Contact();
        contact0.name = "Vasa";
        contact0.phoneNamber = "093 1232323";


        Contact contact1 = new Contact();
        contact1.name = "Kola";
        contact1.phoneNamber = "095 2323232";

        Contact contact2 = new Contact();
        contact2.name = "Petya";
        contact2.phoneNamber = "097 2323232";

        Contact contact3 = new Contact();
        contact3.name = "Anna";
        contact3.phoneNamber = "097 54545454";

        Contact contact4 = new Contact();
        contact4.name = "Lena";
        contact4.phoneNamber = "095 1111111";

        Contact contact5 = new Contact();
        contact5.name = "Lada";
        contact5.phoneNamber = "097 5555555";

        Contact contact6 = new Contact();
        contact6.name = "Nadia";
        contact6.phoneNamber = "095 1212121";

        Contact contact7 = new Contact();
        contact7.name = "Jack";
        contact7.phoneNamber = "095 7777777";

        Contact contact8 = new Contact();
        contact8.name = "Inokentiy";
        contact8.phoneNamber = "095 8888888";

        Contact contact9 = new Contact();
        contact9.name = "Djon";
        contact9.phoneNamber = "095 2323232";

        Contact contact10 = new Contact();
        contact10.name = "Inokentiy";
        contact10.phoneNamber = "097 2121212";


        int listIndex = 11;
        Contact[] contactList = new Contact[listIndex];
        contactList[0] = contact0;
        contactList[1] = contact1;
        contactList[2] = contact2;
        contactList[3] = contact3;
        contactList[4] = contact4;
        contactList[5] = contact5;
        contactList[6] = contact6;
        contactList[7] = contact7;
        contactList[8] = contact8;
        contactList[9] = contact9;
        contactList[10] = contact10;


        //contactListShowAll(contactList);
        int newIndex = Contact.contatcCoutnter(contactList);
        Contact[] contactList2 = new Contact[newIndex];
        System.arraycopy(contactList, 0, contactList2, 0, contactList2.length);

        MainMenu.mainMenu(contactList2);
//        System.out.println("Все исходные контакты:");
//        Contact.contactListShowAll(contactList2);
//        System.out.println(Contact.findContactByNameOrPhone("Vasa", contactList2) == true ? "По таким критериям контакты не найдены" : "");
//
//        System.out.println("Первые 5 контактов:");
//        Contact.showFirstFiveContacts(contactList2);
//
//        System.out.println("=========================");
//
//
//        System.out.println("Последние 5 контактов:");
//        Contact.showLastFiveContacts(contactList2);
//
//        System.out.println("=========================");
//
//        System.out.println("MTC contacts: \n");
//        Contact.showMtsContacts(contactList2);
//
//        System.out.println("=========================");
//        System.out.println("=========================");
//
//
//        System.out.println("Kievstar contacts: \n");
//        Contact.showKievstarContacts(contactList2);
//
//
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("Добавление контакта в контакт-лист:");
//
//        Contact.addInContactList(contactList2);
//
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("Удаление последнего контакта и отображение без него:");
//
//        Contact.contactListShowAll(Contact.removeLastContact(contactList2));
//
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("Удаление по параметру: имя или номер телефона и вывод на экран оставшихся контактов");
//
//        Contact.contactListShowAll(Contact.removeContactByParam(contactList2, "Inokentiy"));
//
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        System.out.println("=========================");
//        Contact.contactListShowAll(updateContactByParam(contactList2, "Vasa"));


    }

//    public static String  menuValidator(String selection){
//        Scanner sc = new Scanner(System.in);
//        while (!checkSelection(selection)) {
//            System.out.println("Не правильно введен пункт меню. ВВедите число от 0 до 9. Пример: 7");
//           selection = sc.nextLine();
//        }
//        return selection;
//    }
//
//    public static boolean checkSelection(String selection) {
//
//        Pattern p = Pattern.compile("^[0-9]{1}$");
//        Matcher m = p.matcher(selection);
//        return m.matches();
//    }

//    public static void subMenu(){
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Возврат в ГЛАВНОЕ МЕНЮ, нажмите \"0\"");
//        System.out.println("\"0\" - Return to the MAIN MENU");
//        int subSelect = sc.nextInt();
//       if(subSelect == 0){
//           mainMenu(contactList2);
//       }
//    }


   // public static void mainMenu(Contact[] contactList2) {
//        Scanner sc = new Scanner(System.in);
//
//        System.out.println("Добро пожаловать в интерактивный контакт - лист!");
//        System.out.println(">>>>>>>MAIN MENU / ГЛАВНОЕ МЕНЮ<<<<<<<:");
//        System.out.println("Выберите действие");
//        System.out.println("\"0\" - Show All/Вывод на экран всех исходных контактов");
//        System.out.println("\"1\" - Show first 5 contacts/Показать первые 5 контактов");
//        System.out.println("\"2\" - Show last 5 contacts/Показать последние 5 контактов");
//        System.out.println("\"3\" - Show all MTC contacts/Показать все МТС контакты");
//        System.out.println("\"4\" - Show all Kievstar contacts/Показать все Киевстар контакты");
//        System.out.println("\"5\" - Remove Last Contact and show without him/Удалить последний контакт и показать без него");
//        System.out.println("\"6\" - Find contact by multiparameters(name or phone)/Поиск контакта по мультипараметру(имени или номеру)");
//        System.out.println("\"7\" - Add to the contactList from console/Добавление в контакт лист нового контакта из консоли");
//        System.out.println("\"8\" - Remove from contactList by multiparameters(name or phone) adn show contactList without him/\n" +
//                "Удаление контакта по мультипараметру(имени или номеру) и отображение контакт - листа без него");
//        System.out.println("\"9\" - Updating contact info. At first we find current contact by multiparameters(name or phone) and add new data\n" +
//                "from console");
//        System.out.print("Сделайте выбор пункта меню: ");
////        System.out.println("=========================");
////        System.out.println("=========================");
////        System.out.println("=========================");
////        System.out.println("=========================");
////        System.out.println("=========================");
//        String selection = sc.nextLine();
//        //String sel = Integer.toString(selection);
//        String res = menuValidator(selection);
//int sel  = Integer.parseInt(res);
//        switch (sel) {
//            case 0: {
//                System.out.println("Все исходные контакты:");
//                Contact.contactListShowAll(contactList2);
//                subMenu();
//            } break;
//            case 1: {
//                System.out.println("Первые 5 контактов:");
//                Contact.showFirstFiveContacts(contactList2);
//            } break;
//            case 2: {
//                System.out.println("Последние 5 контактов:");
//                Contact.showLastFiveContacts(contactList2);
//            } break;
//            case 3: {
//                System.out.println("MTC contacts: \n");
//                Contact.showMtsContacts(contactList2);
//            } break;
//            case 4: {
//                System.out.println("Kievstar contacts: \n");
//                Contact.showKievstarContacts(contactList2);
//            } break;
//            case 5: {
//                System.out.println("Удаление последнего контакта и отображение без него:");
//                Contact.contactListShowAll(Contact.removeLastContact(contactList2));
//            } break;
//            case 6: {
//                System.out.println("Поиск контакта по мультипараметру(имени или номеру):");
//                System.out.println(Contact.findContactByNameOrPhone("Vasa", contactList2) == true ? "По таким критериям контакты не найдены" : "");
//            } break;
//            case 7: {
//                System.out.println("Добавление контакта в контакт-лист c консоли:");
//                Contact.addInContactList(contactList2);
//            } break;
//            case 8: {
//                System.out.println("Удаление контакта по мультипараметру(имени или номеру) и отображение контакт - листа без него");
//                Contact.contactListShowAll(Contact.removeContactByParam(contactList2, "Inokentiy"));
//            } break;
//            case 9: {
//                System.out.println("Обновление контакта, сначала находим его по мультипараметру поиска и вводлм новые данные с консоли");
//                Contact.contactListShowAll(updateContactByParam(contactList2, "Vasa"));
//            } break;
//        }




    }


//    public static Contact[] removeContactByParam(Contact[] contactList, String delParam) {
//        //Contact[] reducedContactList = new Contact[contactList.length];
//        int findResultCounter = 0;
//        for (int i = 0; i < contactList.length; i++) {
//            if (contactList[i].name.contains(delParam) || contactList[i].phoneNamber.contains(delParam)) {
//                findResultCounter = findResultCounter+1;
//                Contact[] reducedContactList2 = new Contact[contactList.length - findResultCounter];
//                int delElemetnIndex = i;
//                System.arraycopy(contactList, 0, reducedContactList2, 0, delElemetnIndex);
//                System.arraycopy(contactList, delElemetnIndex + 1, reducedContactList2, delElemetnIndex, (contactList.length - delElemetnIndex - findResultCounter));
//                return reducedContactList2;
//            }
//        }
//        return null;
//    }


//    public static int findResultCounter(Contact[] contactList, String delParam) {
//        //Contact[] reducedContactList = new Contact[contactList.length];
//        int findResultCounter = 0;
//        for (int i = 0; i < contactList.length; i++) {
//            if (contactList[i].name.contains(delParam) || contactList[i].phoneNamber.contains(delParam)) {
//                findResultCounter = findResultCounter + 1;
//            }
//        }
//        return findResultCounter;
//    }




//
//    public static Contact[] addInContactList(Contact[] contactList) {
//        // int extendedListIndex = contactList.length +1;
//        Contact[] extContactlist = new Contact[(contactList.length + 1)];
//        System.arraycopy(contactList, 0, extContactlist, 0, contactList.length);
//        extContactlist[extContactlist.length - 1] = new Contact().contactAdd();
//
//        contatcCoutnter(extContactlist);
//        contactListShowAll(extContactlist);
//        return extContactlist;
//    }

// Contact[] contactList3 = new Contact[newIndex];
// System.arraycopy(contactList2,0,contactList3,0,contactList2.length);
// contactListShowAll(contactList3);


//    public static int contatcCoutnter(Contact[] contactList) {
//
//
//        int newIndex = 0;
//        for (int i = 0; i < contactList.length; i++)
//            if (contactList[i].name != null || contactList[i].phoneNamber != null)
//                newIndex++;
//        System.out.println("Count of non-empty contacts: " + newIndex + "\n");
//        return newIndex;
//    }











